'use strict';

var React = require('react');
var classNames = require('classnames');
var ClassNameMixin = require('./mixins/ClassNameMixin');
var DimmerMixin = require('./mixins/DimmerMixin');
var Events = require('./utils/Events');
var Close = require('./Close');
var Icon = require('./Icon');

var Modal = React.createClass({displayName: "Modal",
  mixins: [ClassNameMixin, DimmerMixin],

  propTypes: {
    classPrefix: React.PropTypes.string.isRequired,
    type: React.PropTypes.oneOf(['alert', 'confirm', 'prompt', 'loading',
      'actions', 'popup']),
    title: React.PropTypes.node,
    confirmText: React.PropTypes.string,
    cancelText: React.PropTypes.string,
    closeIcon: React.PropTypes.bool,
    closeViaDimmer: React.PropTypes.bool
  },

  getDefaultProps: function() {
    return {
      classPrefix: 'modal',
      closeIcon: true,
      confirmText: '确定',
      cancelText: '取消'
    };
  },

  getInitialState: function() {
    return {
      transitioning: false
    };
  },

  componentDidMount: function() {
    this._documentKeyupListener =
      Events.on(document, 'keyup', this.handleDocumentKeyUp, false);

    this.setDimmerContainer();

    // TODO: 何为添加动画效果的最佳时机？ render 完成以后添加动画 Class？
    this.setState({
      transitioning: true
    });
  },

  componentWillUnmount: function() {
    this._documentKeyupListener.off();
    this.resetDimmerContainer();
  },

  handleDimmerClick: function() {
    if (this.props.closeViaDimmer) {
      this.props.onRequestClose();
    }
  },

  handleBackdropClick: function(e) {
    if (e.target !== e.currentTarget) {
      return;
    }

    this.props.onRequestClose();
  },

  handleDocumentKeyUp: function(e) {
    if (!this.props.keyboard && e.keyCode === 27) {
      this.props.onRequestClose();
    }
  },

  isPopup: function() {
    return this.props.type === 'popup';
  },

  isActions: function() {
    return this.props.type === 'actions';
  },

  // Get input data for prompt modal
  getPromptData: function() {
    var data = [];
    var inputs = React.findDOMNode(this).querySelectorAll('input');

    if (inputs) {
      var i = 0;

      for (; i < inputs.length; i++) {
        data.push(inputs[i].value);
      }
    }

    return (data.length === 0) ? null : ((data.length === 1) ? data[0] : data);
  },

  handleConfirm: function(e) {
    var data = e;

    if (this.props.type === 'prompt') {
      data = this.getPromptData();
    }

    this.props.onConfirm(data);
  },

  renderActions: function() {
    return (
      React.createElement("div", {
        style: {display: 'block'}, 
        className: classNames(this.props.className,
        this.setClassNamespace('modal-actions'),
        this.setClassNamespace('modal-active'))}, 
        this.props.children
      )
    );
  },

  renderPopup: function() {
    return (
      React.createElement("div", {
        style: {display: 'block'}, 
        className: classNames(this.props.className,
        this.setClassNamespace('popup'),
        this.setClassNamespace('modal-active'))}, 
        React.createElement("div", {className: this.setClassNamespace('popup-inner')}, 
          React.createElement("div", {className: this.setClassNamespace('popup-hd')}, 
            this.props.title ? (
              React.createElement("h4", {className: this.setClassNamespace('popup-title')}, 
                this.props.title
              )
            ) : null, 
            React.createElement(Close, {onClick: this.props.onRequestClose})
          ), 
          React.createElement("div", {className: this.setClassNamespace('popup-bd')}, 
            this.props.children
          )
        )
      )
    );
  },

  renderHeader: function() {
    var title = this.props.title;
    var closeIcon = this.props.closeIcon && !this.props.type ? (
      React.createElement(Close, {
        spin: true, 
        onClick: this.props.onRequestClose})) : null;

    return (this.props.title || closeIcon) ? (
      React.createElement("div", {className: this.prefixClass('hd')}, 
        title ? React.createElement("h4", {
          className: this.setClassNamespace('margin-bottom-sm')}, 
          title
        ) : null, 
        closeIcon
      )) : null;
  },

  // Render alert/confirm/prompt buttons
  renderFooter: function() {
    var buttons;
    var btnClass = this.prefixClass('btn');
    var props = this.props;

    switch (this.props.type) {
      case 'alert':
        buttons = (
          React.createElement("span", {
            onClick: this.props.onConfirm, 
            className: btnClass}, 
            this.props.confirmText
          ));
        break;
      case 'confirm':
      case 'prompt':
        buttons = [props.cancelText, props.confirmText].map(function(text, i) {
          return (
            React.createElement("span", {
              key: i, 
              onClick: i === 0 ? this.props.onCancel : this.handleConfirm, 
              className: btnClass}, 
              text
            )
          );
        }.bind(this));
        break;
      default:
        buttons = null;
    }

    return buttons ? (
      React.createElement("div", {className: this.prefixClass('footer')}, 
        buttons
      )
    ) : null;
  },

  render: function() {
    if (this.isActions()) {
      return this.renderDimmer(this.renderActions());
    }

    if (this.isPopup()) {
      return this.renderDimmer(this.renderPopup());
    }

    var classSet = this.getClassSet();
    var props = this.props;
    var footer = this.renderFooter();
    var style = {
        display: 'block',
        width: props.modalWidth,
        height: props.modalHeight,
        marginLeft: props.marginLeft,
        marginTop: props.marginTop
      };

    classSet[this.prefixClass('active')] = this.state.transitioning;

    // .am-modal-no-btn -> refactor this style using `~` selector
    classSet[this.prefixClass('no-btn')] = !footer;
    props.type && (classSet[this.prefixClass(props.type)] = true);

    var modal = (
      React.createElement("div", React.__spread({}, 
        props, 
        {style: style, 
        ref: "modal", 
        title: null, 
        className: classNames(classSet, props.className)}), 
        React.createElement("div", {className: this.prefixClass('dialog')}, 
          this.renderHeader(), 
          React.createElement("div", {className: this.prefixClass('bd'), ref: "modalBody"}, 
            props.type === 'loading' ?
              (props.children ? props.children : React.createElement(Icon, {icon: "spinner", spin: true})) :
              props.children
          ), 
          footer
        )
      )
    );

    return this.renderDimmer(modal);
  }
});

module.exports = Modal;

// TODO: Modal 动画效果实现
// -> 如何关闭 Loading Modal?
// -> 关闭 Modal 以后窗口滚动会原来滚动条所在位置
